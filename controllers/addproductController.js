const formidable = require('formidable');
const fs = require('fs');
const cloudinary = require('cloudinary').v2;
const path = require('path');
const GameModel = require('../models/GameModel');
const {ObjectId} = require('mongodb');
const GenreModel = require('../models/genreModel');
exports.addproduct = async (req, res, next) => {
    const form = formidable({ multiples: true });
    let m_files;
    const formfields = await new Promise(function (resolve, reject) {
        form.parse(req, function (err, fields, files) {
            if (err) {
                reject(err);
                return;
            }
            console.log("within form.parse method, subject field of fields object is: " + fields);
            m_files = files;
            resolve(fields);
        }); // form.parse
    });

    const coverImage = m_files.coverImage;
    const imageName = formfields.title.replace(/ +/g, "") + "coverImg.jpg";

    if (coverImage && coverImage.size > 0) {
        let files = fs.readdirSync(path.join(__dirname,'..', 'public', 'images'));
        files.forEach(file => {
            if(file==imageName)
            fs.unlinkSync(path.join(__dirname,'..', 'public', 'images',imageName));
        });
        const oldPath = coverImage.path;
        const newPath = path.join(__dirname,'..', 'public', 'images',imageName);
        const rawData = fs.readFileSync(oldPath);
        fs.writeFile(newPath, rawData, function (err) {
            if (err) console.log(err)
        })
    }
    if (coverImage && coverImage.size > 0) {
        await cloudinary.uploader.upload(path.join(__dirname,'..', 'public', 'images',imageName), { public_id: formfields.title.replace(/\s+/g, '') + "coverImg", folder: 'GameStore/Games', unique_filename: false, overwrite: true, "width": 189, "height": 265 })
            .then(function (image) {
                console.log();
                console.log("** File Upload (Promise)");
                console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
                console.log("* " + image.public_id);
                console.log("* " + image.url);
                formfields.cover = image.url;
                console.log("*formfields", formfields);

            })
            .catch(function (err) {
                console.log();
                console.log("*** File Upload (Promise)");
                console.log("*formfields", formfields);
                if (err) { console.warn(err); }
            });
    }
    const genre = await GenreModel.findgenrebyname(formfields.category);
    formfields.category = ObjectId(genre._id);
    formfields.basePrice = parseInt(formfields.basePrice);
    formfields.view = parseInt(0);
    console.log("formfields::",formfields);
    formfields.multi = false;
    formfields.single = false;
    if(formfields.multiplayer != null){
        formfields.multi = true;
        delete formfields.multiplayer
    }
    if(formfields.singleplayer != null){
        formfields.single = true;
        delete formfields.singleplayer;
    }
    formfields.req = parseInt(formfields.exampleRadios);
    delete formfields.exampleRadios;
    await GameModel.addnewgame(formfields);
    res.redirect('/product');
}

exports.add = (req, res, next) => {
    res.render('product/add-product',{ username: res.locals.user.username});
};